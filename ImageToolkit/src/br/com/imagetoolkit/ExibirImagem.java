/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 08/09/2014, 16:02:14
 */
package br.com.imagetoolkit;

import br.com.imagetoolkit.util.Util;
import br.com.imagetoolkit.desenho.ISubImagem;
import br.com.imagetoolkit.tela.TelaHistograma;
import java.awt.Canvas;
import java.awt.Panel;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.plaf.basic.BasicTabbedPaneUI.FocusHandler;

/**
 *
 * @author 2091140052
 */
public class ExibirImagem extends javax.swing.JFrame implements ISubImagem {

    private File file;
    private BufferedImage bfOperacao;
    private int countImg = 1;

    /**
     * Creates new form NewJFrame
     */
    public ExibirImagem() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        carregar = new javax.swing.JMenu();
        carregarImg = new javax.swing.JMenuItem();
        miCarregarOriginal = new javax.swing.JMenuItem();
        editar = new javax.swing.JMenu();
        miCinza = new javax.swing.JMenuItem();
        miPretoBranco = new javax.swing.JMenuItem();
        util = new javax.swing.JMenu();
        miEnlargecer = new javax.swing.JMenuItem();
        miReduzir = new javax.swing.JMenuItem();
        miReflexao = new javax.swing.JMenuItem();
        miRotacao90 = new javax.swing.JMenuItem();
        miRotacao270 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miRemoverRuido = new javax.swing.JMenuItem();
        histograma = new javax.swing.JMenu();
        miHistNormal = new javax.swing.JMenuItem();
        miHistAcumu = new javax.swing.JMenuItem();
        miHistNorma = new javax.swing.JMenuItem();
        miHistNormaAcum = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        carregar.setText("Carregar");

        carregarImg.setText("Carregar Imagem");
        carregarImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carregarImgActionPerformed(evt);
            }
        });
        carregar.add(carregarImg);

        miCarregarOriginal.setText("Carregar original");
        miCarregarOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCarregarOriginalActionPerformed(evt);
            }
        });
        carregar.add(miCarregarOriginal);

        jMenuBar1.add(carregar);

        editar.setText("Editar");

        miCinza.setText("Cinza");
        miCinza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCinzaActionPerformed(evt);
            }
        });
        editar.add(miCinza);

        miPretoBranco.setText("Preto e branco");
        miPretoBranco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPretoBrancoActionPerformed(evt);
            }
        });
        editar.add(miPretoBranco);

        jMenuBar1.add(editar);

        util.setText("Manipulação Geometrica");

        miEnlargecer.setText("Enlargecer");
        miEnlargecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEnlargecerActionPerformed(evt);
            }
        });
        util.add(miEnlargecer);

        miReduzir.setText("Reduzir");
        miReduzir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReduzirActionPerformed(evt);
            }
        });
        util.add(miReduzir);

        miReflexao.setText("Reflexão");
        miReflexao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReflexaoActionPerformed(evt);
            }
        });
        util.add(miReflexao);

        miRotacao90.setText("Rotação 90º");
        miRotacao90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRotacao90ActionPerformed(evt);
            }
        });
        util.add(miRotacao90);

        miRotacao270.setText("Rotação 270");
        miRotacao270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRotacao270ActionPerformed(evt);
            }
        });
        util.add(miRotacao270);

        jMenuBar1.add(util);

        jMenu1.setText("Ruido");

        miRemoverRuido.setText("RemoverRuido");
        miRemoverRuido.setActionCommand("miRemoverRuido");
        miRemoverRuido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemoverRuidoActionPerformed(evt);
            }
        });
        jMenu1.add(miRemoverRuido);

        jMenuBar1.add(jMenu1);

        histograma.setText("Histograma");

        miHistNormal.setText("Histograma Normal");
        miHistNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHistNormalActionPerformed(evt);
            }
        });
        histograma.add(miHistNormal);

        miHistAcumu.setText("Histograma Acumulativo");
        miHistAcumu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHistAcumuActionPerformed(evt);
            }
        });
        histograma.add(miHistAcumu);

        miHistNorma.setText("Histograma Normalizado");
        miHistNorma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHistNormaActionPerformed(evt);
            }
        });
        histograma.add(miHistNorma);

        miHistNormaAcum.setText("Histograma Norm. Acumulativo");
        miHistNormaAcum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHistNormaAcumActionPerformed(evt);
            }
        });
        histograma.add(miHistNormaAcum);

        jMenuBar1.add(histograma);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        tab.getAccessibleContext().setAccessibleName("er");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miCinzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCinzaActionPerformed
        verificarBufferImage();
        bfOperacao = Transformacao.transformeNivelCinza(bfOperacao, 0);
        updateCanvas(bfOperacao);
}//GEN-LAST:event_miCinzaActionPerformed

    private void carregarImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carregarImgActionPerformed
        file = Util.selectImage();
        bfOperacao = null;
        verificarBufferImage();
        ImageCanvas imageCanvas = new ImageCanvas(bfOperacao, this);
        tab.removeAll();
        tab.add(file.getName(), imageCanvas);
    }//GEN-LAST:event_carregarImgActionPerformed

    private void miPretoBrancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPretoBrancoActionPerformed
        verificarBufferImage();
        bfOperacao = Binarizacao.binarize(bfOperacao, 0, 100);
        updateCanvas(bfOperacao);
    }//GEN-LAST:event_miPretoBrancoActionPerformed

    private void miEnlargecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEnlargecerActionPerformed
        verificarBufferImage();
        int fator = createDialogSlider();
        if (fator > 0) {
            bfOperacao = ManipulacaoGeometrica.enlarguecerImagem(bfOperacao, fator);
            updateCanvas(bfOperacao);
        }
    }//GEN-LAST:event_miEnlargecerActionPerformed

    private void miReduzirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReduzirActionPerformed
        verificarBufferImage();
        int fator = createDialogSlider();
        if (fator > 0) {
            bfOperacao = ManipulacaoGeometrica.reduzirImagem(bfOperacao, fator);
            updateCanvas(bfOperacao);
        }
    }//GEN-LAST:event_miReduzirActionPerformed

    private void miReflexaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReflexaoActionPerformed
        verificarBufferImage();
        bfOperacao = ManipulacaoGeometrica.reflexaoXInPlace(bfOperacao);
        updateCanvas(bfOperacao);

    }//GEN-LAST:event_miReflexaoActionPerformed

    private void miCarregarOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCarregarOriginalActionPerformed
        verificarBufferImage();
        tab.removeAll();
        bfOperacao = Util.carregarBufferedImage(file);
        ImageCanvas imageCanvas = new ImageCanvas(bfOperacao, this);
        tab.removeAll();
        tab.add(file.getName(), imageCanvas);
    }//GEN-LAST:event_miCarregarOriginalActionPerformed

    private void miRotacao90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRotacao90ActionPerformed
        verificarBufferImage();
        bfOperacao = ManipulacaoGeometrica.rotação90Graus(bfOperacao);
        updateCanvas(bfOperacao);
    }//GEN-LAST:event_miRotacao90ActionPerformed

    private void miRemoverRuidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRemoverRuidoActionPerformed
        verificarBufferImage();
        bfOperacao = Ruido.reduzirRuido(bfOperacao, 2);
        updateCanvas(bfOperacao);
    }//GEN-LAST:event_miRemoverRuidoActionPerformed

    private void miRotacao270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRotacao270ActionPerformed
        verificarBufferImage();
        bfOperacao = ManipulacaoGeometrica.rotacao270Graus(bfOperacao);
        updateCanvas(bfOperacao);
    }//GEN-LAST:event_miRotacao270ActionPerformed

    private void miHistNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHistNormalActionPerformed
        final int[] hist = Histograma.calcularHistograma(bfOperacao);
        TelaHistograma telaHistograma = new TelaHistograma(hist, "Histograma");
        telaHistograma.setVisible(true);
}//GEN-LAST:event_miHistNormalActionPerformed

    private void miHistAcumuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHistAcumuActionPerformed
        final int[] hist = Histograma.calcularHistogramaAcumulativo(bfOperacao);
        TelaHistograma telaHistograma = new TelaHistograma(hist, "Histograma Acumulativo");
        telaHistograma.setVisible(true);
}//GEN-LAST:event_miHistAcumuActionPerformed

    private void miHistNormaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHistNormaActionPerformed
        final double[] hist = Histograma.calcularHistogramaNormalizado(bfOperacao);
        TelaHistograma telaHistograma = new TelaHistograma(hist, "Histograma Normalizado");
        telaHistograma.setVisible(true);
    }//GEN-LAST:event_miHistNormaActionPerformed

    private void miHistNormaAcumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHistNormaAcumActionPerformed
        final double[] hist = Histograma.calcularHistogramaNormalizadoAcumulativo(bfOperacao);
        TelaHistograma telaHistograma = new TelaHistograma(hist, "Histograma Normalizado Acumulativo");
        telaHistograma.setVisible(true);
    }//GEN-LAST:event_miHistNormaAcumActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ExibirImagem().setVisible(true);
            }
        });
    }

    private int createDialogSlider() {
        String retorno = JOptionPane.showInputDialog(this, "Informe o fator");
        int intRetorno = 0;
        try {
            intRetorno = Integer.parseInt(retorno);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(null, "Valor invalido.");
        }
        return intRetorno;
    }

    private ImageCanvas updateCanvas(BufferedImage bufferedImage) {
        ImageCanvas canvas = new ImageCanvas(bufferedImage, this);
        ImageCanvas atual = (ImageCanvas) tab.getSelectedComponent();
        int posicaoAtual = tab.getSelectedIndex();
        if (atual != null) {
            atual = canvas;
            tab.setComponentAt(posicaoAtual, canvas);
        }
        return canvas;
    }

    private void addTabIten(BufferedImage bufferedImage) {
        ImageCanvas imageCanvas = new ImageCanvas(bufferedImage, this);
        tab.add("Imagen " + countImg++, imageCanvas);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu carregar;
    private javax.swing.JMenuItem carregarImg;
    private javax.swing.JMenu editar;
    private javax.swing.JMenu histograma;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem miCarregarOriginal;
    private javax.swing.JMenuItem miCinza;
    private javax.swing.JMenuItem miEnlargecer;
    private javax.swing.JMenuItem miHistAcumu;
    private javax.swing.JMenuItem miHistNorma;
    private javax.swing.JMenuItem miHistNormaAcum;
    private javax.swing.JMenuItem miHistNormal;
    private javax.swing.JMenuItem miPretoBranco;
    private javax.swing.JMenuItem miReduzir;
    private javax.swing.JMenuItem miReflexao;
    private javax.swing.JMenuItem miRemoverRuido;
    private javax.swing.JMenuItem miRotacao270;
    private javax.swing.JMenuItem miRotacao90;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JMenu util;
    // End of variables declaration//GEN-END:variables

    //Chamar esse metodo antes de qualquer operação com a imagem
    private void verificarBufferImage() {
        if (bfOperacao == null) {
            bfOperacao = Util.carregarBufferedImage(file);
        } else {
            ImageCanvas icTab = (ImageCanvas) tab.getSelectedComponent();
            bfOperacao = icTab.getImg();
        }
    }

    public void addSubImagem(Point pInicial, int width, int heigth) {
        BufferedImage subImagem = bfOperacao.getSubimage(pInicial.x, pInicial.y, width, heigth);
        addTabIten(subImagem);
    }
}
